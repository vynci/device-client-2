{
  "name": "lcd",
  "version": "0.2.4",
  "description": "Hitachi HD44780 LCD driver",
  "main": "lcd.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fivdi/lcd.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "onoff": "~0.3.2",
    "q": "~1.0.1"
  },
  "keywords": [
    "lcd",
    "hd44780",
    "gpio",
    "beaglebone",
    "bbb",
    "bb",
    "raspberry",
    "raspi",
    "rpi",
    "pi",
    "linux"
  ],
  "author": {
    "name": "fivdi"
  },
  "license": "MIT",
  "readme": "## lcd\n\nA Node.js Hitachi HD44780 LCD driver for Linux boards such as the BeagleBone or\nRaspberry Pi. Heavily inspired by the Arduino\n[LiquidCrystal library](http://arduino.cc/en/Tutorial/LiquidCrystal).\n\nMost LCDs compatible with the HD44780 have a sixteen pin interface. This\nNode.js module uses six of these interface pins for controlling such displays.\nRegister select (RS), enable (E), and four data bus pins (D4-D7). The\nread/write (R/W) pin is assumed to be tied low to permanently select write\nmode.\n\n## Installation\n\n    $ [sudo] npm install lcd\n\nlcd requires Node.js v0.8.0 or higher.\n\n**BeagleBone Prerequisites**\n\nBefore installing epoll on stock Ångström on the BeagleBone three Python\nmodules need to be installed; python-compiler, python-misc, and\npython-multiprocessing. They can be installed with the following commands:\n\n```bash\n$ opkg update\n$ opkg install python-compiler\n$ opkg install python-misc\n$ opkg install python-multiprocessing\n```\n\n## News & Updates\n\n### lcd v0.2.0 breaking asynchronous print change\n\nAs of lcd v0.2.0 the print method is asynchronous. In previous versions it was\nsynchronous.\n\n## Usage\n\nThe following nine line program can be used to make a UTC digital clock.\n\n```js\nvar Lcd = require('lcd'),\n  lcd = new Lcd({rs:27, e:65, data:[23, 26, 46, 47], cols:8, rows:1});\n\nlcd.on('ready', function () {\n  setInterval(function () {\n    lcd.setCursor(0, 0);\n    lcd.print(new Date().toISOString().substring(11, 19));\n  }, 1000);\n});\n```\n\nHere it is up and running on a BeagleBone Black wired up to an 8x1 display:\n\n<img src=\"https://github.com/fivdi/lcd/raw/master/example/digital-clock-8x1.jpg\">\n\nAfter requiring the lcd module, the above program creates an Lcd object. The\nconstructor function is passed all the necessary information.\n\nThe six LCD interface pins used to control the display need to be wired up to\nsix GPIOs on the BeagleBone Black. GPIOs on Linux are identified by unsigned\nintegers. The relevant information for all six GPIOs used here is shown in the\nfollowing table:\n\nBBB Expansion Header | GPIO No. | LCD Function | LCD Pin No.\n:---: | :---: | :---: | :---:\nP8_13 | 23 | Data Bus Bit 4 | 11\nP8_14 | 26 | Data Bus Bit 5 | 12\nP8_15 | 47 | Data Bus Bit 7 | 14\nP8_16 | 46 | Data Bus Bit 6 | 13\nP8_17 | 27 | Register Select |  4\nP8_18 | 65 | Enable  |  6\n\nThe constructor function is also told how many columns and rows the display\nhas, eight and one respectively in this case.\n\nIt takes several milliseconds to initialize an LCD. The constructor starts the\ninitialization process, but it doesn't wait for it to complete. Instead,\na 'ready' event is emitted after the LCD has been completely initialized and is\nready for usage.\n\nThe 'ready' handler leverages setInterval to execute a function that updates\nthe time displayed on the LCD once a second.\n\nAdding the following few lines will turn the digital clock into a good citizen\nthat cleans up after itself.\n\n```js\n// If ctrl+c is hit, free resources and exit.\nprocess.on('SIGINT', function () {\n  lcd.close();\n  process.exit();\n});\n```\n\n## API\n\n**Lcd(config)**\n\nReturns a new Lcd object which inherits from EventEmitter. A 'ready' event will\nbe emitted when the display is ready for usage.\n\nThe config object has these possibilities:\n\n * **cols** LCD column count. Defaults to sixteen.\n * **rows** LCD row count. Defaults to one.\n * **largeFont** Use 5x10 dot font. Defaults to false for 5x8 dot font.\n * **rs** Register select GPIO number.\n * **e** Enable GPIO number.\n * **data** Array of four GPIO numbers for data bus bits D4 through D7.\n\n**print(val)** Converts val to string and write it to the display\nasynchronously. A 'printed' event is emitted after the operation has completed.\nval is passed to the event handler as the first argument. The example\nprint-twice-20x4.js demonstrates how to print two strings in succession.\n\n**clear()** Clears display and returns cursor to the home position. A 'clear'\nevent is emitted after the operation has completed.\n\n**home()** Returns cursor to home position. Also returns display being shifted\nto the original position. A 'home' event is emitted after the operation has\ncompleted.\n\n**setCursor(col, row)** Moves the cursor to the specified col and row.\nNumbering for col and row starts at zero.\n\n**cursor()** Turn cursor on.\n\n**noCursor()** Turn cursor off.\n\n**blink()** Turn cursor blink on.\n\n**noBlink()** Turn cursor blink off.\n\n**scrollDisplayLeft()** Shift display to the left. Cursor follows the display\nshift.\n\n**scrollDisplayRight()** Shift display to the right. Cursor follows the display\nshift.\n\n**leftToRight()** Sets cursor move direction to left to right.\n\n**rightToLeft()** Sets cursor move direction to right to left.\n\n**autoscroll()** Automatically shift display when data is written to display.\n\n**noAutoscroll()** Turn automatic shifting off.\n\n**close()** Frees (unexports) all GPIOs used by the Lcd.\n\n## Example \"Hello, World!\" on an 8x1 display\n\n\"Hello, World!\" is five characters too long for an 8x1 display, but by moving\nthe cursor to the ninth column, turning autoscroll on, and displaying a new\ncharacter every 300 milliseconds the text can be scrolled onto the display\ncharacter by character. Note that an 8x1 display actually has eighty columns\nbut only eight of them are visible.\n\n```js\nvar Lcd = require('../lcd'),\n  lcd = new Lcd({rs:27, e:65, data:[23, 26, 46, 47], cols:8, rows:1});\n\nlcd.on('ready', function () {\n  lcd.setCursor(8, 0);\n  lcd.autoscroll();\n  print('Hello, World! ** ');\n});\n\nfunction print(str, pos) {\n  pos = pos || 0;\n\n  if (pos === str.length) {\n    pos = 0;\n  }\n\n  lcd.print(str[pos]);\n\n  setTimeout(function () {\n    print(str, pos + 1);\n  }, 300);\n}\n```\n\n## Tested with the following displays\n\n[NHD-0108FZ-FL-YBW-33V3](http://www.newhavendisplay.com/nhd0108fzflybw33v3-p-5155.html)\n\n[NHD-0420DZ-FL-YBW-33V3](http://www.newhavendisplay.com/nhd0420dzflybw33v3-p-5168.html)\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fivdi/lcd/issues"
  },
  "homepage": "https://github.com/fivdi/lcd",
  "_id": "lcd@0.2.4",
  "dist": {
    "shasum": "ca24e572a0d527a69534dfe545bf6a33eee58e2e"
  },
  "_from": "lcd@",
  "_resolved": "https://registry.npmjs.org/lcd/-/lcd-0.2.4.tgz"
}
