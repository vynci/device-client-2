{
  "name": "promiseback",
  "version": "2.0.0",
  "description": "Accept an optional node-style callback, and also return a spec-compliant Promise!",
  "main": "index.js",
  "scripts": {
    "test": "npm run lint && node test.js && npm run coverage-quiet",
    "coverage": "covert test.js",
    "coverage-quiet": "covert test.js --quiet",
    "lint": "jscs *.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ljharb/promiseback"
  },
  "keywords": [
    "promiseback",
    "promisebacks",
    "promise",
    "promises",
    "callback",
    "callbacks"
  ],
  "author": {
    "name": "Jordan Harband"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ljharb/promiseback/issues"
  },
  "homepage": "https://github.com/ljharb/promiseback",
  "testling": {
    "files": "test.js",
    "browsers": [
      "iexplore/6.0..latest",
      "firefox/3.0..6.0",
      "firefox/15.0..latest",
      "firefox/nightly",
      "chrome/4.0..10.0",
      "chrome/20.0..latest",
      "chrome/canary",
      "opera/10.0..latest",
      "opera/next",
      "safari/4.0..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2"
    ]
  },
  "dependencies": {
    "promise-deferred": "~2.0.0"
  },
  "devDependencies": {
    "tape": "~2.14.0",
    "covert": "~1.0.0",
    "jscs": "~1.6.1"
  },
  "engines": {
    "node": ">= 0.4"
  },
  "readme": "#promiseback <sup>[![Version Badge][2]][1]</sup>\n\n[![Build Status][3]][4] [![dependency status][5]][6] [![dev dependency status][7]][8]\n\n[![npm badge][11]][1]\n\n[![browser support][9]][10]\n\nAccept an optional node-style callback, and also return a spec-compliant Promise!\n\n## API\n```js\nvar promiseback = require('promiseback');\nvar callback = function (err, value) {};\n\n/* without a promise: */\npromiseback(callback);\n\t/*\n\t\t- will throw if `callback` is not a function\n\t\t- returns a \"deferred\"\n\t\t- has resolve/reject methods, and `promise` property\n\t\t- will call `callback` as expected when deferred is resolved\n\t*/\n\n/* with a promise: */\npromiseback(promise, callback);\n\t/*\n\t\t- will throw if `callback` is truthy and not a function\n\t\t- `promise` will be converted to a Promise, so you can pass a value as well\n\t\t- returns a Promise\n\t\t- will call `callback` as expected when the promise is fulfilled\n\t*/\n```\n\n## Examples\n\nUsing deferreds:\n```js\nvar promiseback = require('promiseback');\n\nmodule.exports = function doSomethingCool(thing, callback) {\n\t// If callback is not provided, this code will simply return a normal promise.\n\t// If callback is provided but is not a function, promiseback will immediately throw a TypeError.\n\n\t// \"deferred\" is an object with `reject/resolve` methods, and a `promise` property.\n\tvar deferred = promiseback(callback);\n\tif (thing) {\n\t\tdeferred.resolve(thing);\n\t} else {\n\t\tdeferred.reject(thing);\n\t}\n\treturn deferred.promise;\n};\n```\n\nUsing a straight promise, when you can get it from somewhere else:\n```js\nvar promiseback = require('promiseback');\n\nmodule.exports = function doSomethingCool(thing, callback) {\n\t// If callback is not provided, this code will simply return a normal promise.\n\t// If callback is provided but is not a function, promiseback will immediately throw a TypeError.\n\n\tvar newThingPromise = makeNewThing(thing);\n\treturn promiseback(newThingPromise, callback);\n};\n```\n\n## Tests\nSimply clone the repo, `npm install`, and run `npm test`\n\n[1]: https://npmjs.org/package/promiseback\n[2]: http://vb.teelaun.ch/ljharb/promiseback.svg\n[3]: https://travis-ci.org/ljharb/promiseback.svg\n[4]: https://travis-ci.org/ljharb/promiseback\n[5]: https://david-dm.org/ljharb/promiseback.svg\n[6]: https://david-dm.org/ljharb/promiseback\n[7]: https://david-dm.org/ljharb/promiseback/dev-status.svg\n[8]: https://david-dm.org/ljharb/promiseback#info=devDependencies\n[9]: https://ci.testling.com/ljharb/promiseback.png\n[10]: https://ci.testling.com/ljharb/promiseback\n[11]: https://nodei.co/npm/promiseback.png?downloads=true&stars=true\n\n",
  "readmeFilename": "README.md",
  "_id": "promiseback@2.0.0",
  "dist": {
    "shasum": "080a4c2caf7069dcfd72ee70aed8cb683e7d3344"
  },
  "_from": "promiseback@~2.0.0",
  "_resolved": "https://registry.npmjs.org/promiseback/-/promiseback-2.0.0.tgz"
}
